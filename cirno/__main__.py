#!/usr/bin/env python3
import os

from discord.ext import commands
import aiosqlite
from aioosuapi import aioosuapi

from cirno.modules import first_run
from cirno.manifest import VERSION
from cirno.manifest import CONTRIBUTORS

from cirno.modules.storage_management import database_file
from cirno.modules.connections import bot_token
from cirno.modules.connections import osu_api_key

if os.environ.get('CIRNO_PREFIX'):
    command_prefix = os.environ.get('CIRNO_PREFIX')
else:
    command_prefix = ","

first_run.ensure_tables()

initial_extensions = [
    "cirno.cogs.BotManagement",
    "cirno.cogs.ScoreTracking",
]


class Cirno(commands.Bot):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.background_tasks = []

        self.app_version = VERSION
        self.project_contributors = CONTRIBUTORS

        self.description = f"Cirno {self.app_version}"
        self.database_file = database_file
        self.osu = aioosuapi(osu_api_key)

        for extension in initial_extensions:
            try:
                self.load_extension(extension)
            except Exception as e:
                print(e)

    async def start(self, *args, **kwargs):
        self.db = await aiosqlite.connect(self.database_file)

        await super().start(*args, **kwargs)

    async def close(self):
        # Cancel all Task object generated by cogs.
        # This prevents any task still running due to having long sleep time.
        for task in self.background_tasks:
            task.cancel()

        # Close connection to the database
        await self.db.close()

        # Run actual discord.py close.
        await super().close()

    async def on_ready(self):
        print("Logged in as")
        print(self.user.name)
        print(self.user.id)
        print("------")
        await first_run.add_admins(self)


client = Cirno(command_prefix=command_prefix)
client.run(bot_token)
